CHMOD(2)                   Linux Programmer's Manual                  CHMOD(2)

NNAAMMEE
       chmod, fchmod, fchmodat - change permissions of a file

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ssttaatt..hh>>

       iinntt cchhmmoodd((ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, mmooddee__tt _m_o_d_e));;
       iinntt ffcchhmmoodd((iinntt _f_d,, mmooddee__tt _m_o_d_e));;

       ##iinncclluuddee <<ffccnnttll..hh>>           /* Definition of AT_* constants */
       ##iinncclluuddee <<ssyyss//ssttaatt..hh>>

       iinntt ffcchhmmooddaatt((iinntt _d_i_r_f_d,, ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, mmooddee__tt _m_o_d_e,, iinntt _f_l_a_g_s));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ffcchhmmoodd():
           Since glibc 2.24:
               _POSIX_C_SOURCE >= 199309L
           Glibc 2.19 to 2.23
               _POSIX_C_SOURCE
           Glibc 2.16 to 2.19:
               _BSD_SOURCE || _POSIX_C_SOURCE
           Glibc 2.12 to 2.16:
               _BSD_SOURCE || _XOPEN_SOURCE >= 500 ||
                   _POSIX_C_SOURCE >= 200809L
           Glibc 2.11 and earlier:
               _BSD_SOURCE || _XOPEN_SOURCE >= 500

       ffcchhmmooddaatt():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  cchhmmoodd()  and ffcchhmmoodd() system calls change a files mode bits.  (The
       file mode consists of the file permission bits  plus  the  set-user-ID,
       set-group-ID,  and sticky bits.)  These system calls differ only in how
       the file is specified:

       * cchhmmoodd() changes the mode of the  file  specified  whose  pathname  is
         given in _p_a_t_h_n_a_m_e, which is dereferenced if it is a symbolic link.

       * ffcchhmmoodd()  changes  the  mode of the file referred to by the open file
         descriptor _f_d.

       The new file mode is specified in _m_o_d_e, which is a bit mask created  by
       ORing together zero or more of the following:

       SS__IISSUUIIDD  (04000)  set-user-ID  (set  process  effective  user ID on eexx‐‐
                         eeccvvee(2))

       SS__IISSGGIIDD  (02000)  set-group-ID (set process effective group ID  on  eexx‐‐
                         eeccvvee(2); mandatory locking, as described in ffccnnttll(2);
                         take a new file's group from parent directory, as de‐
                         scribed in cchhoowwnn(2) and mmkkddiirr(2))

       SS__IISSVVTTXX  (01000)  sticky bit (restricted deletion flag, as described in
                         uunnlliinnkk(2))

       SS__IIRRUUSSRR  (00400)  read by owner

       SS__IIWWUUSSRR  (00200)  write by owner

       SS__IIXXUUSSRR  (00100)  execute/search by owner ("search" applies for  direc‐
                         tories,  and  means that entries within the directory
                         can be accessed)

       SS__IIRRGGRRPP  (00040)  read by group

       SS__IIWWGGRRPP  (00020)  write by group

       SS__IIXXGGRRPP  (00010)  execute/search by group

       SS__IIRROOTTHH  (00004)  read by others

       SS__IIWWOOTTHH  (00002)  write by others

       SS__IIXXOOTTHH  (00001)  execute/search by others

       The effective UID of the calling process must match the  owner  of  the
       file,  or  the  process  must  be  privileged  (Linux: it must have the
       CCAAPP__FFOOWWNNEERR capability).

       If the calling process is not privileged  (Linux:  does  not  have  the
       CCAAPP__FFSSEETTIIDD  capability),  and  the group of the file does not match the
       effective group ID of the process or one  of  its  supplementary  group
       IDs, the SS__IISSGGIIDD bit will be turned off, but this will not cause an er‐
       ror to be returned.

       As a security measure, depending on the filesystem, the set-user-ID and
       set-group-ID  execution  bits  may  be turned off if a file is written.
       (On Linux, this occurs  if  the  writing  process  does  not  have  the
       CCAAPP__FFSSEETTIIDD  capability.)   On  some filesystems, only the superuser can
       set the sticky bit, which may have a special meaning.  For  the  sticky
       bit,  and for set-user-ID and set-group-ID bits on directories, see iinn‐‐
       ooddee(7).

       On NFS filesystems, restricting the permissions will immediately influ‐
       ence  already  open  files,  because  the access control is done on the
       server, but open files are maintained by the client.  Widening the per‐
       missions  may  be delayed for other clients if attribute caching is en‐
       abled on them.

   ffcchhmmooddaatt(())
       The ffcchhmmooddaatt() system call operates in exactly the same way as cchhmmoodd(),
       except for the differences described here.

       If  the  pathname given in _p_a_t_h_n_a_m_e is relative, then it is interpreted
       relative to the directory referred to  by  the  file  descriptor  _d_i_r_f_d
       (rather  than  relative to the current working directory of the calling
       process, as is done by cchhmmoodd() for a relative pathname).

       If _p_a_t_h_n_a_m_e is relative and _d_i_r_f_d is the special value  AATT__FFDDCCWWDD,  then
       _p_a_t_h_n_a_m_e  is  interpreted  relative to the current working directory of
       the calling process (like cchhmmoodd()).

       If _p_a_t_h_n_a_m_e is absolute, then _d_i_r_f_d is ignored.

       _f_l_a_g_s can either be 0, or include the following flag:

       AATT__SSYYMMLLIINNKK__NNOOFFOOLLLLOOWW
              If _p_a_t_h_n_a_m_e is a symbolic link, do not dereference  it:  instead
              operate  on  the link itself.  This flag is not currently imple‐
              mented.

       See ooppeennaatt(2) for an explanation of the need for ffcchhmmooddaatt().

RREETTUURRNN VVAALLUUEE
       On success, zero is returned.  On error, -1 is returned, and  _e_r_r_n_o  is
       set appropriately.

EERRRROORRSS
       Depending  on  the filesystem, errors other than those listed below can
       be returned.

       The more general errors for cchhmmoodd() are listed below:

       EEAACCCCEESS Search permission is denied on a component of the  path  prefix.
              (See also ppaatthh__rreessoolluuttiioonn(7).)

       EEFFAAUULLTT _p_a_t_h_n_a_m_e points outside your accessible address space.

       EEIIOO    An I/O error occurred.

       EELLOOOOPP  Too many symbolic links were encountered in resolving _p_a_t_h_n_a_m_e.

       EENNAAMMEETTOOOOLLOONNGG
              _p_a_t_h_n_a_m_e is too long.

       EENNOOEENNTT The file does not exist.

       EENNOOMMEEMM Insufficient kernel memory was available.

       EENNOOTTDDIIRR
              A component of the path prefix is not a directory.

       EEPPEERRMM  The  effective UID does not match the owner of the file, and the
              process  is  not  privileged  (Linux:  it  does  not  have   the
              CCAAPP__FFOOWWNNEERR capability).

       EEPPEERRMM  The   file   is   marked   immutable   or   append-only.    (See
              iiooccttll__iiffllaaggss(2).)

       EERROOFFSS  The named file resides on a read-only filesystem.

       The general errors for ffcchhmmoodd() are listed below:

       EEBBAADDFF  The file descriptor _f_d is not valid.

       EEIIOO    See above.

       EEPPEERRMM  See above.

       EERROOFFSS  See above.

       The same errors that occur for cchhmmoodd() can also occur  for  ffcchhmmooddaatt().
       The following additional errors can occur for ffcchhmmooddaatt():

       EEBBAADDFF  _d_i_r_f_d is not a valid file descriptor.

       EEIINNVVAALL Invalid flag specified in _f_l_a_g_s.

       EENNOOTTDDIIRR
              _p_a_t_h_n_a_m_e is relative and _d_i_r_f_d is a file descriptor referring to
              a file other than a directory.

       EENNOOTTSSUUPP
              _f_l_a_g_s specified AATT__SSYYMMLLIINNKK__NNOOFFOOLLLLOOWW, which is not supported.

VVEERRSSIIOONNSS
       ffcchhmmooddaatt() was added to Linux in kernel  2.6.16;  library  support  was
       added to glibc in version 2.4.

CCOONNFFOORRMMIINNGG TTOO
       cchhmmoodd(), ffcchhmmoodd(): 4.4BSD, SVr4, POSIX.1-2001i, POSIX.1-2008.

       ffcchhmmooddaatt(): POSIX.1-2008.

NNOOTTEESS
   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The  GNU  C  library  ffcchhmmooddaatt() wrapper function implements the POSIX-
       specified interface described in this  page.   This  interface  differs
       from  the underlying Linux system call, which does _n_o_t have a _f_l_a_g_s ar‐
       gument.

   GGlliibbcc nnootteess
       On older kernels where ffcchhmmooddaatt() is  unavailable,  the  glibc  wrapper
       function falls back to the use of cchhmmoodd().  When _p_a_t_h_n_a_m_e is a relative
       pathname, glibc constructs a pathname based on  the  symbolic  link  in
       _/_p_r_o_c_/_s_e_l_f_/_f_d that corresponds to the _d_i_r_f_d argument.

SSEEEE AALLSSOO
       cchhmmoodd(1), cchhoowwnn(2), eexxeeccvvee(2), ooppeenn(2), ssttaatt(2), iinnooddee(7), ppaatthh__rreessoolluu‐‐
       ttiioonn(7), ssyymmlliinnkk(7)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       https://www.kernel.org/doc/man-pages/.

Linux                             2017-09-15                          CHMOD(2)
